// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tesaurs.CardGameCore.Data;

#nullable disable

namespace Tesaurs.CardGameCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230402015610_init-migration")]
    partial class initmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tesaurs.CardGameCore.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("integer");

                    b.Property<int?>("DeckId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerId1");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Tesaurs.CardGameCore.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("Tesaurs.CardGameCore.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Tesaurs.CardGameCore.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CurrentGameId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeckId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrentGameId");

                    b.HasIndex("DeckId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Tesaurs.CardGameCore.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailConfirmed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastVisit")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tesaurs.CardGameCore.Models.Card", b =>
                {
                    b.HasOne("Tesaurs.CardGameCore.Models.Deck", null)
                        .WithMany("Cards")
                        .HasForeignKey("DeckId");

                    b.HasOne("Tesaurs.CardGameCore.Models.Player", null)
                        .WithMany("CardsOnTable")
                        .HasForeignKey("PlayerId");

                    b.HasOne("Tesaurs.CardGameCore.Models.Player", null)
                        .WithMany("Hand")
                        .HasForeignKey("PlayerId1");
                });

            modelBuilder.Entity("Tesaurs.CardGameCore.Models.Deck", b =>
                {
                    b.HasOne("Tesaurs.CardGameCore.Models.User", "User")
                        .WithMany("Decks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tesaurs.CardGameCore.Models.Player", b =>
                {
                    b.HasOne("Tesaurs.CardGameCore.Models.Game", "CurrentGame")
                        .WithMany("Players")
                        .HasForeignKey("CurrentGameId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tesaurs.CardGameCore.Models.Deck", "Deck")
                        .WithOne()
                        .HasForeignKey("Tesaurs.CardGameCore.Models.Player", "DeckId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tesaurs.CardGameCore.Models.User", "User")
                        .WithOne("Player")
                        .HasForeignKey("Tesaurs.CardGameCore.Models.Player", "UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("CurrentGame");

                    b.Navigation("Deck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tesaurs.CardGameCore.Models.Deck", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Tesaurs.CardGameCore.Models.Game", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Tesaurs.CardGameCore.Models.Player", b =>
                {
                    b.Navigation("CardsOnTable");

                    b.Navigation("Hand");
                });

            modelBuilder.Entity("Tesaurs.CardGameCore.Models.User", b =>
                {
                    b.Navigation("Decks");

                    b.Navigation("Player");
                });
#pragma warning restore 612, 618
        }
    }
}
